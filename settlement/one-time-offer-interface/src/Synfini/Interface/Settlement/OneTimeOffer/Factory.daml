module Synfini.Interface.Settlement.OneTimeOffer.Factory where

import Synfini.Interface.Settlement.OneTimeOffer.OneTimeOffer qualified as OneTimeOffer
import qualified Daml.Finance.Interface.Settlement.RouteProvider as RouteProvider
import qualified Daml.Finance.Interface.Settlement.Factory as SettlementFactory
import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)
import DA.Set (Set)
import Daml.Finance.Interface.Settlement.Types (Step)
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure

data View = View
  with
    provider : Party
  deriving (Show, Eq)

type V = View

interface Factory requires Disclosure.I where
  viewtype V

  create' : Create -> Update (ContractId OneTimeOffer.I)

  nonconsuming choice Create : ContractId OneTimeOffer.I
    with
      offerId : Id
      offerers : Set Party
      offerees : Set Party
      offerDescription : Text
      settlementInstructors : Set Party
      settlers : Set Party
      steps : [Step]
      settlementTime : Optional Time
      minQuantity : Optional Decimal
      maxQuantity :  Optional Decimal
      routeProviderCid : ContractId RouteProvider.I
      settlementFactoryCid : ContractId SettlementFactory.I
      observers : PartiesMap
    controller offerers
    do
      create' this arg

type I = Factory
