module Synfini.Settlement.OneTimeOffer.Test where

import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Settlement.Factory as SettlementFactory
import qualified Daml.Finance.Interface.Settlement.RouteProvider as RouteProvider
import qualified Daml.Finance.Settlement.Factory as SettlementImpl
import qualified Daml.Finance.Settlement.RouteProvider.SingleCustodian as SettlementImpl
import Daml.Script
import qualified DA.Set as Set

data Setup = Setup
  with
    custodian1 : Party
    depository1 : Party
    issuer1 : Party
    alice : Party
    bob : Party
    charlie : Party
    settlementFactoryCid : ContractId SettlementFactory.I
    routeProviderCid : ContractId RouteProvider.I

withSetup : (Setup -> Script ()) -> Script ()
withSetup test = do
  provider <- allocateParty "provider"
  custodian1 <- allocateParty "custodian1"
  depository1 <- allocateParty "depository1"
  issuer1 <- allocateParty "issuer1"
  alice <- allocateParty "alice"
  bob <- allocateParty "bob"
  charlie <- allocateParty "charlie"
  let observers = Set.fromList [custodian1, depository1, issuer1, alice, bob, charlie]
  settlementFactoryCid <- toInterfaceContractId <$> submit provider do
    createCmd SettlementImpl.Factory with
      provider
      observers
  routeProviderCid <- toInterfaceContractId <$> submit provider do
    createCmd SettlementImpl.SingleCustodian with
      provider
      custodian = custodian1
      observers
  test (Setup with ..)

test_bi_lateral_workflow : Script ()
test_bi_lateral_workflow = withSetup $ \setup -> do
  pure ()
