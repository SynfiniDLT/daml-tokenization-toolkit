module Synfini.Instrument.PartyBoundAttributes.Factory where

import DA.Set qualified as Set

import Daml.Finance.Util.Disclosure qualified as DisclosureUtil

import Daml.Finance.Interface.Types.Common.Types (PartiesMap)

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Instrument.PartyBoundAttributes.Instrument qualified as PbtImpl

import Synfini.Interface.Instrument.PartyBoundAttributes.Factory qualified as PbtFactory

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance PbtFactory.F for Factory where
      view = PbtFactory.View with provider
      create' c@(PbtFactory.Create {instrument, description, validAsOf, owner, attributes }) = do
        cid <- toInterfaceContractId <$>
          create PbtImpl.Instrument with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            validAsOf
            attributes
            owner
            observers = c.observers
        Instrument.createReference instrument.depository $ toInterfaceContractId cid
        pure cid
      remove PbtFactory.Remove {instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton provider; observers
      setObservers = DisclosureUtil.setObserversImpl @Factory @Disclosure.I this None
      addObservers = DisclosureUtil.addObserversImpl @Factory @Disclosure.I this None
      removeObservers = DisclosureUtil.removeObserversImpl @Factory @Disclosure.I this None
