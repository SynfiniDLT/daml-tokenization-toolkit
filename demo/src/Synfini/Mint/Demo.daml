module Synfini.Mint.Demo where

import qualified Daml.Finance.Interface.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Factory as Account
import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Holding.Factory as Holding
import qualified Daml.Finance.Interface.Settlement.Factory as Settlement

import qualified Daml.Finance.Account.Account as AccountImpl
import qualified Daml.Finance.Holding.Fungible as FungibleImpl
import qualified Daml.Finance.Settlement.Factory as SettlementImpl

import Daml.Script
import qualified DA.Map as Map
import qualified DA.Set as Set
import Synfini.Mint

setupParty : Text -> Script Party
setupParty name = do
  party <- allocatePartyWithHint name (PartyIdHint name)
  userId <- validateUserId name
  createUser (User userId (Some party)) [CanActAs party]
  pure party

setup : Script ()
setup = do
  custodian <- setupParty "CoinValidator"
  issuer <- setupParty "CoinIssuer"
  depository <- setupParty "CoinDepository"
  minterBurner <- setupParty "CoinMinterBurner"
  coinOperator <- setupParty "CoinOperator"
  investorA <- setupParty "InvestorA"

  holdingFactoryCid : ContractId Holding.Factory <- fmap toInterfaceContractId . submit custodian $
    createCmd FungibleImpl.Factory with
      provider = custodian
      observers = Map.fromList [("observers", Set.fromList [minterBurner, investorA])]
  accountFactoryCid : ContractId Account.Factory <- fmap toInterfaceContractId . submit custodian $
    createCmd AccountImpl.Factory with
      provider = custodian
      observers = Map.fromList [("observers", Set.fromList [investorA])]
  settlementFactoryCid : ContractId Settlement.Factory <- fmap toInterfaceContractId . submit custodian $
    createCmd SettlementImpl.Factory with
      provider = custodian
      observers = Set.fromList [minterBurner, investorA]

  let supplyAccount = AccountKey with
        custodian
        owner = minterBurner
        id = Id "supply"
  submitMulti [custodian, minterBurner] [] $ exerciseCmd accountFactoryCid Account.Create with
    account = supplyAccount
    controllers = Account.Controllers with
      incoming = Set.fromList [custodian, minterBurner]
      outgoing = Set.fromList [custodian, minterBurner]
    holdingFactoryCid
    description = "Supply account"
    observers = Map.fromList [("observers", Set.fromList [investorA, minterBurner])]

  let investorAAccount = AccountKey with
        custodian
        owner = investorA
        id = Id "0"
  submitMulti [custodian, investorA] [] $ exerciseCmd accountFactoryCid Account.Create with
    account = investorAAccount
    controllers = Account.Controllers with
      incoming = Set.fromList [coinOperator]
      outgoing = Set.fromList [investorA]
    holdingFactoryCid
    description = "InvestorA's account"
    observers = Map.fromList [("observers", Set.fromList [minterBurner])]

  let instrument = InstrumentKey with
        issuer
        depository
        id = Id "MyCoin"
        version = "0"

  mintCid <- submitMulti [custodian, issuer, minterBurner, coinOperator] [] $ createCmd Mint with
    custodian
    minterBurner
    receiverAuthorisers = Set.fromList [coinOperator]
    supplyAccountId = supplyAccount.id
    instrument
    settlementFactoryCid
    observers = Set.fromList [investorA, minterBurner]
  pure ()
