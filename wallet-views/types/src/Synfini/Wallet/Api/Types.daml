-- Warning: if any types are added to this module they should also be added to the `UsedTypes` in
-- Synfini.Wallet.Api.Types.Internal, otherwise they will not appear in the codegen output
module Synfini.Wallet.Api.Types where

import DA.Set (Set)

import Daml.Finance.Interface.Settlement.Types
import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument
import Daml.Finance.Interface.Instrument.Token.Instrument qualified as Token
import Daml.Finance.Interface.Settlement.Batch qualified as Batch
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction

import Synfini.Interface.Onboarding.Account.OpenOffer.OpenOffer qualified as AccountOpenOffer
import Synfini.Interface.Onboarding.Issuer.Instrument.Token.Issuer qualified as TokenIssuer

-- Utility types
data TransactionDetail = TransactionDetail
  with
    offset : Text
    effectiveTime : Time
  deriving (Show, Eq)

-- Accounts
data AccountSummary = AccountSummary
  with
    cid : ContractId Account.I
    view : Account.V
  deriving (Show, Eq)

data Accounts = Accounts
  with
    accounts : [AccountSummary]
  deriving (Show, Eq)

data AccountFilter = AccountFilter
  with
    custodian : Optional Party
    owner : Party
  deriving (Show, Eq)

-- Account offers
data AccountOpenOfferSummary = AccountOpenOfferSummary
  with
    cid : ContractId AccountOpenOffer.I
    view : AccountOpenOffer.V
    create : TransactionDetail
  deriving (Show, Eq)

data AccountOpenOffers = AccountOpenOffers
  with
    accountOpenOffers : [AccountOpenOfferSummary]
  deriving (Show, Eq)

-- TODO may need to add filter parameters here
data AccountOpenOffersFilter = AccountOpenOffersFilter
  with
  deriving (Show, Eq)

-- Balances
data Balance = Balance
  with
    account : AccountKey
    instrument : InstrumentKey
    unlocked : Decimal
    locked : Decimal
  deriving (Show, Eq)

data Balances = Balances
  with
    balances : [Balance]
  deriving (Show, Eq)

data BalanceFilter = BalanceFilter
  with
    account : AccountKey
  deriving (Show, Eq)

-- Settlements
data SettlementStep
  routedStep
  id
  instructionCid
  allocation
  approval = SettlementStep
  with
    routedStep : routedStep
    instructionId : id
    instructionCid : instructionCid
    allocation : allocation
    approval : approval
  deriving (Show, Eq)

data SettlementSummary
  id
  parties
  batchCid
  routedStep
  instructionCid
  allocation
  approval = SettlementSummary
  with
    batchId : id
    requestors : parties
    settlers : parties
    batchCid : Optional batchCid
    contextId : Optional id
    description : Optional Text
    steps : [SettlementStep routedStep id instructionCid allocation approval]
    witness : TransactionDetail
    execution : Optional TransactionDetail
  deriving (Show, Eq)

data Settlements
  id
  parties
  batchCid
  routedStep
  instructionCid
  allocation
  approval = Settlements
  with
    settlements : [SettlementSummary id parties batchCid routedStep instructionCid allocation approval]
  deriving (Show, Eq)

newtype SettlementsRaw jsonObject = SettlementsRaw (
    Settlements jsonObject jsonObject Text jsonObject Text jsonObject jsonObject
  ) deriving (Show, Eq)

newtype SettlementsTyped = SettlementsTyped (
    Settlements Id Parties (ContractId Batch.I) RoutedStep (ContractId Instruction.I) Allocation Approval
  ) deriving (Show, Eq)

data SettlementsFilter = SettlementsFilter
  with
    before : Optional Text
    limit : Optional Int
  deriving (Show, Eq)

-- Holdings
data HoldingSummary = HoldingSummary
  with
    cid : ContractId Holding.I
    view : Holding.V
    create : Optional TransactionDetail
  deriving (Show, Eq)

data Holdings = Holdings
  with
    holdings : [HoldingSummary]
  deriving (Show, Eq)

data HoldingFilter = HoldingFilter
  with
    account : AccountKey
    instrument : InstrumentKey
  deriving (Show, Eq)

-- Instruments
-- TODO may need to add create/archive TransactionDetail for this type
data InstrumentSummary = InstrumentSummary
  with
    cid : ContractId Instrument.I
    tokenView : Optional Token.V
  deriving (Show, Eq)

data Instruments = Instruments
  with
    instruments : [InstrumentSummary]
  deriving (Show, Eq)

data InstrumentsFilter = InstrumentsFilter
  with
    depository : Optional Party
    issuer : Party
    id : Optional Id
    version : Optional Text
  deriving (Show, Eq)

-- Issuers
data TokenIssuerSummary = TokenIssuerSummary
  with
    cid : ContractId TokenIssuer.I
    view : TokenIssuer.V
  deriving (Show, Eq)

data IssuerSummary = IssuerSummary
  with
    token : Optional TokenIssuerSummary -- In future, there may be issuer contracts for other instrument types, so this is an optional field
  deriving (Show, Eq)

data Issuers = Issuers
  with
    issuers : [IssuerSummary]
  deriving (Show, Eq)

data IssuersFilter = IssuersFilter
  with
    depository : Optional Party
    issuer : Optional Party
  deriving (Show, Eq)
