-- Warning: if any types are added to this module they should also be added to the `UsedTypes` in
-- Synfini.Wallet.Api.Types.Internal, otherwise they will not appear in the codegen output
module Synfini.Wallet.Api.Types where

import qualified Daml.Finance.Interface.Account.Account as Account
import qualified Daml.Finance.Interface.Holding.Base as Holding
import qualified Daml.Finance.Interface.Settlement.Batch as Batch
import qualified Daml.Finance.Interface.Settlement.Instruction as Instruction
import qualified Daml.Finance.Interface.Instrument.Base.Instrument as Instrument
import qualified Daml.Finance.Interface.Instrument.Token.Instrument as Token
import qualified Synfini.Interface.Onboarding.Account.OpenOffer.OpenOffer as AccountOpenOffer
import qualified Synfini.Interface.Onboarding.Issuer.Token.Issuer as TokenIssuer
import qualified Synfini.Interface.Instrument.PartyBoundAttributes.Instrument as Pbt
import Daml.Finance.Interface.Settlement.Types
import Daml.Finance.Interface.Types.Common.Types
import DA.Set (Set)

data Balance = Balance
  with
    account : AccountKey
    instrument : InstrumentKey
    unlocked : Decimal
    locked : Decimal
  deriving (Show, Eq)

data Balances = Balances
  with
    balances : [Balance]
  deriving (Show, Eq)

data TransactionDetail = TransactionDetail
  with
    offset : Text
    effectiveTime : Time
  deriving (Show, Eq)

data HoldingSummary = HoldingSummary
  with
    cid : ContractId Holding.I
    view : Holding.V
    create : Optional TransactionDetail
  deriving (Show, Eq)

data Holdings = Holdings
  with
    holdings : [HoldingSummary]
  deriving (Show, Eq)

data BalanceFilter = BalanceFilter
  with
    account : AccountKey
  deriving (Show, Eq)

data HoldingFilter = HoldingFilter
  with
    account : AccountKey
    instrument : InstrumentKey
  deriving (Show, Eq)

data AccountFilter = AccountFilter
  with
    owner : Party
  deriving (Show, Eq)

data AccountSummary = AccountSummary
  with
    cid : ContractId Account.I
    view : Account.V
    open : Optional TransactionDetail
    close : Optional TransactionDetail
  deriving (Show, Eq)

data Accounts = Accounts
  with
    accounts : [AccountSummary]
  deriving (Show, Eq)

data SettlementsFilter = SettlementsFilter
  with
    before : Optional Text
    limit : Optional Int
  deriving (Show, Eq)

data SettlementStep = SettlementStep
  with
    routedStep : RoutedStep
    instructionId : Id
    instructionCid : ContractId Instruction.I
    allocation : Optional Allocation
    approval : Optional Approval
  deriving (Show, Eq)

data SettlementSummary = SettlementSummary
  with
    batchId : Id
    requestors : Set Party
    batchCid : Optional (ContractId Batch.I)
    contextId : Optional Id
    description : Optional Text
    steps : [SettlementStep]
    witness : TransactionDetail
    execution : Optional TransactionDetail
  deriving (Show, Eq)

data Settlements = Settlements
  with
    settlements : [SettlementSummary]
  deriving (Show, Eq)

-- TODO may need to add create/archive TransactionDetail for this type
data InstrumentSummary = InstrumentSummary
  with
    cid : ContractId Instrument.I
    tokenView : Optional Token.V
    pbaView : Optional Pbt.V
  deriving (Show, Eq)

data Instruments = Instruments
  with
    instruments : [InstrumentSummary]
  deriving (Show, Eq)

data InstrumentsFilter = InstrumentsFilter
  with
    depository : Party
    issuer : Party
    id : Id
    version : Optional Text
  deriving (Show, Eq)

-- TODO may need to add filter parameters here
data AccountOpenOffersFilter = AccountOpenOffersFilter
  with
  deriving (Show, Eq)

data AccountOpenOfferSummary = AccountOpenOfferSummary
  with
    cid : ContractId AccountOpenOffer.I
    view : AccountOpenOffer.V
    create : Optional TransactionDetail
  deriving (Show, Eq)

data AccountOpenOffers = AccountOpenOffers
  with
    accountOpenOffers : [AccountOpenOfferSummary]
  deriving (Show, Eq)

-- TODO may need to add filter parameters here
data IssuersFilter = IssuersFilter
  with
    depository : Optional Party
    issuer : Optional Party
  deriving (Show, Eq)

data TokenIssuerSummary = TokenIssuerSummary
  with
    cid : ContractId TokenIssuer.I
    view : TokenIssuer.V
  deriving (Show, Eq)

data IssuerSummary = IssuerSummary
  with
    tokenIssuer : Optional TokenIssuerSummary -- In future, there may be issuer contracts for other instrument types, so this is an optional field
  deriving (Show, Eq)

data Issuers = Issuers
  with
    issuers : [IssuerSummary]
  deriving (Show, Eq)
