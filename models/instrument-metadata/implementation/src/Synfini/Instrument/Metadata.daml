module Synfini.Instrument.Metadata where

import DA.Set qualified as Set

import Daml.Finance.Util.Disclosure qualified as DisclosureUtil

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Instrument.Metadata.Metadata qualified as Metadata
import qualified Synfini.Interface.Instrument.Metadata.Factory as MetadataFactory

template Metadata
  with
    instrument : InstrumentKey
    attributes : Metadata.Attributes
    disclosureControllers : Parties
    observers : PartiesMap
  where
    signatory instrument.depository, instrument.issuer
    observer Disclosure.flattenObservers observers, disclosureControllers

    interface instance Metadata.I for Metadata where
      view = Metadata.View with instrument, attributes

    interface instance Disclosure.I for Metadata where
      view = Disclosure.View with
        disclosureControllers = Set.fromList [instrument.issuer, instrument.depository]
        observers
      setObservers = DisclosureUtil.setObserversImpl this $
        Some (Metadata.disclosureUpdateReference instrument)
      addObservers = DisclosureUtil.addObserversImpl @Metadata this $
        Some (Metadata.disclosureUpdateReference instrument)
      removeObservers = DisclosureUtil.removeObserversImpl this $
        Some (Metadata.disclosureUpdateReference instrument)

template Factory
  with
    provider : Party
    observers : PartiesMap
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance MetadataFactory.I for Factory where
      view = MetadataFactory.View with provider
      create' args = do
        cid <- toInterfaceContractId <$>
          create Metadata with
            instrument = args.instrument
            attributes = args.attributes
            disclosureControllers = args.disclosureControllers
            observers = args.observers
        Metadata.createReference args.instrument.depository $ toInterfaceContractId cid
        pure cid
      remove MetadataFactory.Remove {instrument} = do
        (refCid, ref) <- fetchByKey @Metadata.R instrument
        instrumentCid <- exercise refCid Metadata.GetCid with viewer = instrument.depository
        archive instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton provider; observers
      setObservers = DisclosureUtil.setObserversImpl @Factory @Disclosure.I this None
      addObservers = DisclosureUtil.addObserversImpl @Factory @Disclosure.I this None
      removeObservers = DisclosureUtil.removeObserversImpl @Factory @Disclosure.I this None
