-- Copyright (c) 2024 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Onboarding.Issuer.Metadata.Publisher where

import DA.Set qualified as Set

import Daml.Finance.Util.Disclosure qualified as ImplUtil

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Instrument.Metadata.Factory qualified as MetadataFactory
import Synfini.Interface.Onboarding.Issuer.Metadata.Factory qualified as PublisherFactory
import Synfini.Interface.Onboarding.Issuer.Metadata.Publisher qualified as Publisher

template Publisher
  with
    depository : Party
    issuer : Party
    metadataFactoryCid : ContractId MetadataFactory.I
    observers : PartiesMap
  where
    signatory depository

    observer issuer, Disclosure.flattenObservers observers

    interface instance Disclosure.I for Publisher where
      view = Disclosure.View with disclosureControllers = Set.fromList [depository, issuer], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance Publisher.I for Publisher where
      view = Publisher.View with depository, issuer, metadataFactoryCid
      publishMetadata args = do
        exercise metadataFactoryCid MetadataFactory.Create with
          instrument = InstrumentKey with depository, issuer, id = args.id, version = args.version
          attributes = args.attributes
          disclosureControllers = args.disclosureControllers
          observers = args.observers
      removeMetadata args = do
        exercise metadataFactoryCid MetadataFactory.Remove with
          instrument = InstrumentKey with depository, issuer, id = args.id, version = args.version

template Factory
  with
    provider : Party
    observers : PartiesMap
  where
    signatory provider

    observer Disclosure.flattenObservers observers

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.fromList [provider], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance PublisherFactory.I for Factory where
      view = PublisherFactory.View with provider
      create' PublisherFactory.Create {depository, issuer, metadataFactoryCid, observers} = toInterfaceContractId <$>
        create Publisher with
          depository
          issuer
          metadataFactoryCid
          observers
