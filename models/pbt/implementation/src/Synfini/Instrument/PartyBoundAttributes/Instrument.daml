module Synfini.Instrument.PartyBoundAttributes.Instrument where

import DA.Set qualified as Set

import Daml.Finance.Lifecycle.Event.Replacement qualified as Replacement
import Daml.Finance.Util.Disclosure qualified as DisclosureUtil

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Instrument.PartyBoundAttributes.Instrument qualified as Pbt

type T = Instrument

template Instrument
  with
    issuer : Party
    depository : Party
    id : Id
    version : Text
    description : Text
    validAsOf : Time
    attributes : Pbt.Attributes
    owner : Party
    observers : PartiesMap
  where
    signatory depository, issuer
    observer obs

    ensure owner `Set.member` obs

    let instrument = InstrumentKey with depository; issuer; id; version
        obs = Disclosure.flattenObservers observers
  
    interface instance BaseInstrument.I for Instrument where
      view = BaseInstrument.View with depository; issuer; id; validAsOf; description; version
      getKey = instrument

    interface instance Pbt.I for Instrument where
      view = Pbt.View with instrument, description, validAsOf, attributes, owner
      declareUpgrade Pbt.DeclareUpgrade {
        id;
        description;
        effectiveTime
      } = toInterfaceContractId <$> create Replacement.Event with
        id
        description
        providers = Set.fromList [issuer, depository]
        effectiveTime
        targetInstrument = instrument
        perUnitReplacement = [Quantity with unit = instrument, amount = 1.0]
        observers = obs

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = Set.fromList [issuer, owner]; observers
      setObservers = DisclosureUtil.setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = DisclosureUtil.addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = DisclosureUtil.removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
