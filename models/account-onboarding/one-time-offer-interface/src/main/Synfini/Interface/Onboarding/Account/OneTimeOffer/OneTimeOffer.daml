module Synfini.Interface.Onboarding.Account.OneTimeOffer.OneTimeOffer where

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Account.Factory qualified as Account
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

-- | View of a 'OneTimeOffer'.
data View = View
  with
    account : AccountKey -- ^ The account to be created.
    accountControllers : Account.Controllers -- ^ The controllers of the account to be created.
    accountDescription : Text -- ^ Description of the account.
    accountObservers : PartiesMap -- ^ Observers of the account contract.
    accountFactoryCid : ContractId Account.F -- ^ Factory to be used to create the 'Account' instance.
    holdingFactoryCid : ContractId Holding.F -- ^ Holding factory to be used to create holdings in the account.
    description : Text -- ^ Description of this offer.
  deriving (Show, Eq)

-- | Type synonym for 'View'.
type V = View

-- | An offer made by a custodian to create an 'Account' contract under its custody. It is a "one-time" offer because
-- it is archived once accepted (or declined) by the account owner.
interface OneTimeOffer requires Disclosure.I where
  viewtype V

  -- | Implementation of the 'Accept' choice.
  accept : Update (ContractId Account.I)

  -- | Implementation of the 'Decline' choice.
  decline : Update ()

  -- | Retrieves the interface view.
  nonconsuming choice GetView : View
    with
      viewer : Party -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  -- | Accept the offer and create the 'Account'.
  choice Accept : ContractId Account.I
    controller (view this).account.owner
    do
      accept this

  -- | Reject the offer.
  choice Decline : ()
    controller (view this).account.owner
    do
      decline this

-- | Type synonym for 'OneTimeOffer'.
type I = OneTimeOffer
