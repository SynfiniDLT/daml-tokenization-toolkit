-- Copyright (c) 2024 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.TrackableHolding.Fungible where

import Daml.Finance.Holding.Fungible qualified as Default
import Daml.Finance.Holding.Util qualified as ImplUtil
import Daml.Finance.Util.Disclosure qualified as ImplUtil

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Holding.Base qualified as Base
import Daml.Finance.Interface.Holding.Factory qualified as Base
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

-- HasField observers instance needed to make the implementation of Disclosure.I compile
instance HasField "observers" Fungible PartiesMap where
  getField f = f.defaultFungible.observers
  setField obs f = f with defaultFungible.observers = obs

-- | Fungible holding which can be tracked by additional observers: i.e. any consuming choices such as 'Split',
-- 'Transfer' etc. will result in a new holding which maintains the same additional observers. This can be useful in
-- cases where it is strictly required to maintain these observers. For example, a regulatory reporting application
-- would need to be able to track holding movements.
template Fungible
  with
    defaultFungible : Default.Fungible -- ^ Default implementation of the 'Fungible' interface.
    trackers : Parties -- ^ Additional observers which cannot be removed from the contract.
  where
    signatory (signatory defaultFungible)
    observer (observer defaultFungible), trackers

    ensure (ensure defaultFungible)

    interface instance Disclosure.I for Fungible where
      view = view @Disclosure.I (toInterface defaultFungible)
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance Base.I for Fungible where
      view = view @Base.I (toInterface defaultFungible)
      acquire = ImplUtil.acquireImpl this.defaultFungible.lock (\lock -> this with defaultFungible.lock = lock)
      release = ImplUtil.releaseImpl this.defaultFungible.lock (\lock -> this with defaultFungible.lock = lock)

    interface instance Transferable.I for Fungible where
      view = view @Transferable.I (toInterface defaultFungible)
      transfer = ImplUtil.transferImpl $ toInterface this

    interface instance Fungible.I for Fungible where
      view = view @Fungible.I (toInterface defaultFungible)
      split = ImplUtil.splitImpl (defaultFungible.amount) (\amount -> this with defaultFungible.amount = amount)
      merge arg@(Fungible.Merge{fungibleCids}) = do
        fungibles : [Fungible] <- mapA (fetch . coerceContractId) fungibleCids
        assertMsg
          "Can only merge with holdings that use the same trackers"
          (all (\fungible -> fungible.trackers == trackers) fungibles)
        ImplUtil.mergeImpl
          (defaultFungible.amount)
          (.defaultFungible.amount)
          (\amount -> this with defaultFungible.amount = amount)
          arg

-- HasField observers instance needed to make the implementation of Disclosure.I compile
instance HasField "observers" Factory PartiesMap where
  getField f = f.defaultFactory.observers
  setField obs f = f with defaultFactory.observers = obs

-- | Factory use to create instances of trackable 'Fungible' holdings.
template Factory
  with
    defaultFactory : Default.Factory -- ^ Default implementation of the 'Factory' interface.
    holdingTrackers : Parties -- ^ Parties which are always added as observers onto any Holdings created with this
      -- factory.
  where
    signatory (signatory defaultFactory)
    observer (observer defaultFactory)

    interface instance Base.F for Factory
      where
        view = view @Base.F (toInterface defaultFactory)
        create' args = do
          defaultFungibleCid <- Base.create' (toInterface defaultFactory) args
          defaultFungible <- fetch (coerceContractId defaultFungibleCid)
          archive defaultFungibleCid
          toInterfaceContractId <$>
            create Fungible with defaultFungible, trackers = holdingTrackers

    interface instance Disclosure.I for Factory where
      view = view @Disclosure.I (toInterface defaultFactory)
      setObservers = ImplUtil.setObserversImpl @Factory @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @Factory @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @Factory @Disclosure.I this None
