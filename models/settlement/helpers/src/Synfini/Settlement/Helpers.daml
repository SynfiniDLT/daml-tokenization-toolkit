module Synfini.Settlement.Helpers where

import DA.Action (foldlA)
import DA.Map (Map)
import DA.Set (Set)

import DA.List qualified as L
import DA.List.Total qualified as List
import DA.Map qualified as Map
import DA.Optional qualified as O
import DA.Set qualified as Set

import Daml.Finance.Interface.Settlement.Types
import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction

import Synfini.Interface.Onboarding.Issuer.MinterBurner.MinterBurner qualified as MinterBurner

-- | The type of allocation to apply to the instruction using the helper function.
data AllocationHelp =
  UnallocatedHelp | -- ^ Use the 'Unallocated' allocation type.
  PledgeFromFungiblesHelp | -- ^ Use the 'Pledge' allocation type by allocating fungible 'Holding's.
  PledgeFromNonFungiblesHelp | -- ^ Use the 'Pledge' allocation type by allocating non-fungible 'Holding's.
  CreditReceiverHelp | -- ^ Use the 'CreditReceiver' allocation type.
  AllocateMintHelp | -- ^ Use a 'MinterBurner' instance to allocate the instruction.
  UnallocateMintHelp | -- ^ Use a 'MinterBurner' instance to un-allocate the instruction.
  SettleOffledgerHelp | -- ^ Use the 'SettleOffledger' allocation type.
  PassThroughFromHelp with accountId : Id, instructionId : Id -- ^ Use the 'PassThroughFrom' allocation type.
  deriving (Show, Eq)

-- | The type of approval to apply to the instruction using the helper function.
data ApprovalHelp =
  UnapprovedHelp | -- ^ Use the 'Unapproved' allocation type.
  TakeDeliveryHelp with accountId : Id | -- ^ Use the 'TakeDelivery' allocation type.
  DebitSenderHelp | -- ^ Use the 'DebitSender' allocation type.
  ApproveBurnHelp | -- ^ Use a 'MinterBurner' instance to approve the instruction.
  UnapproveBurnHelp | -- ^ Use a 'MinterBurner' instance to un-approve the instruction.
  SettleOffledgerAcknowledgeHelp | -- ^ Use the 'SettleOffledger' approval type.
  PassThroughToHelp with accountId : Id, instructionId : Id -- ^ Use the 'PassThroughTo' approval type.
  deriving (Show, Eq)

-- | Descriptor of a 'Holding' contract.
data HoldingDescriptor = HoldingDescriptor
  with
    instrument : InstrumentKey -- ^ The instrument of the 'Holding'.
    custodian : Party -- ^ The custodian of the 'Holding'.
  deriving (Show, Eq, Ord)

-- | Type synonym for 'Holding's contract IDs and their descriptors.
type HoldingsMap = Map HoldingDescriptor [ContractId Holding.I] 

-- | Type synonym for 'Instruction's contract IDs and their instruction IDs.
type InstructionsMap = Map Id (ContractId Instruction.I)

-- | Template to allow for allocation and/or approval of one or more 'Instruction's from a single 'Batch'. It is inteded
-- to be created and exercised on in the same transaction (i.e. a CreateAndExerciseCommand on the ledger API).
template AllocateAndApproveHelper
  with
    actors : Set Party -- ^ Parties authorising the allocations and/or approvals.
    holdings : HoldingsMap -- ^ Holdings contracts to be used for settlement, grouped by their descriptors.
    instructions : InstructionsMap -- ^ Map which resolves an instrution ID to its contract ID.
    allocations : Map Id AllocationHelp -- ^ Instruction IDs and the allocations to perform on them.
    approvals : Map Id ApprovalHelp -- ^ Instruction IDs and the approvals to perform on them.
  where
    signatory actors

    ensure all (`Map.member` instructions) (Map.keys allocations) &&
      all (`Map.member` instructions) (Map.keys approvals)

    -- | Allocate and approve all required instructions and return the new 'Instruction' and 'Holding' contract IDs.
    choice AllocateAndApprove : (InstructionsMap, HoldingsMap)
      controller actors
      do
        let mapInstr (instrId, instructionCid) =
              (instrId, instructionCid, Map.lookup instrId allocations, Map.lookup instrId approvals)
        let instructionsList = mapInstr <$> (Map.toList instructions)
        foldlA (allocateAndApproveHelper actors) (instructions, holdings) instructionsList

-- | HIDE
type InstructionState = (InstructionsMap, HoldingsMap)

-- | HIDE
allocateAndApproveHelper :
  Set Party ->
  InstructionState ->
  (Id, ContractId Instruction.I, Optional AllocationHelp, Optional ApprovalHelp) ->
  Update InstructionState
allocateAndApproveHelper actors (instructionsMap, holdingsMap) (instrId, instructionCid, allocation, approval) = do
  let viewer = L.head (Set.toList actors)
  instruction <- exercise instructionCid Instruction.GetView with viewer
  let holdingDescriptor = HoldingDescriptor with
        custodian = instruction.routedStep.custodian
        instrument = instruction.routedStep.quantity.unit
  (holdingsMap, instructionCid) <- case allocation of
    None -> pure (holdingsMap, instructionCid)
    Some UnallocatedHelp -> do
      (instructionCid', _) <- exercise instructionCid Instruction.Allocate with
        allocation = Unallocated
        actors
      pure (holdingsMap, instructionCid')
    Some PledgeFromFungiblesHelp -> do
      let holdings = O.fromSomeNote "Holdings not provided" (Map.lookup holdingDescriptor holdingsMap)
      (holdingCid, remainingHoldingCid) <- mergeAndSplitHelper
        (coerceContractId <$> holdings)
        instruction.routedStep.quantity.amount
      (instructionCid', _) <- exercise instructionCid Instruction.Allocate with
        allocation = Pledge (toInterfaceContractId holdingCid)
        actors
      let remainingHoldingCids = O.optional [] (\cid -> [toInterfaceContractId cid]) remainingHoldingCid
      pure (
          Map.insert holdingDescriptor remainingHoldingCids holdingsMap,
          instructionCid'
        )
    Some PledgeFromNonFungiblesHelp -> error "Non-fungible settlement not supported"
    Some AllocateMintHelp -> do
      (instructionCid', _) <- MinterBurner.exerciseInterfaceByKey @MinterBurner.I
        (minterBurnerKey instruction)
        viewer
        MinterBurner.AllocateMint with instructionCid
      pure (holdingsMap, instructionCid')
    Some UnallocateMintHelp -> do
      (instructionCid', _) <- MinterBurner.exerciseInterfaceByKey @MinterBurner.I
        (minterBurnerKey instruction)
        viewer
        MinterBurner.UnallocateMint with instructionCid
      pure (holdingsMap, instructionCid')
    Some CreditReceiverHelp -> do
      (instructionCid', _) <- exercise instructionCid Instruction.Allocate with
        allocation = CreditReceiver
        actors
      pure (holdingsMap, instructionCid')
    Some SettleOffledgerHelp -> do
      (instructionCid', _) <- exercise instructionCid Instruction.Allocate with
        allocation = SettleOffledger
        actors
      pure (holdingsMap, instructionCid')
    Some (PassThroughFromHelp accountId passThroughId) -> do
      let passThroughInstructionKey = InstructionKey with
            requestors = instruction.requestors
            batchId = instruction.batchId
            id = passThroughId
          passThroughFromAccount = AccountKey with
            custodian = instruction.routedStep.custodian
            owner = instruction.routedStep.sender
            id = accountId
      (instructionCid', _) <- exercise instructionCid Instruction.Allocate with
        allocation = PassThroughFrom (passThroughFromAccount, passThroughInstructionKey)
        actors
      pure (holdingsMap, instructionCid')
  instructionCid <- case approval of
    None -> pure instructionCid
    Some UnapprovedHelp -> exercise instructionCid Instruction.Approve with actors, approval = Unapproved
    Some (TakeDeliveryHelp accountId) -> do
      let takeDeliveryAccount = AccountKey with
            custodian = instruction.routedStep.custodian
            owner = instruction.routedStep.receiver
            id = accountId
      exercise instructionCid Instruction.Approve with actors, approval = TakeDelivery takeDeliveryAccount
    Some DebitSenderHelp -> exercise instructionCid Instruction.Approve with actors, approval = DebitSender
    Some ApproveBurnHelp -> MinterBurner.exerciseInterfaceByKey @MinterBurner.I
      (minterBurnerKey instruction)
      viewer
      MinterBurner.ApproveBurn with instructionCid
    Some UnapproveBurnHelp -> MinterBurner.exerciseInterfaceByKey @MinterBurner.I
      (minterBurnerKey instruction)
      viewer
      MinterBurner.UnapproveBurn with instructionCid
    Some SettleOffledgerAcknowledgeHelp ->
      exercise instructionCid Instruction.Approve with actors, approval = SettleOffledgerAcknowledge
    Some (PassThroughToHelp accountId passThroughId) -> do
      let passThroughInstructionKey = InstructionKey with
            requestors = instruction.requestors
            batchId = instruction.batchId
            id = passThroughId
          passThroughToAccount = AccountKey with
            custodian = instruction.routedStep.custodian
            owner = instruction.routedStep.receiver
            id = accountId
      exercise instructionCid Instruction.Approve with
        actors
        approval = PassThroughTo (passThroughToAccount, passThroughInstructionKey)
  pure (Map.insert instrId instructionCid instructionsMap, holdingsMap)

-- | HIDE
minterBurnerKey : Instruction.V -> MinterBurner.V
minterBurnerKey instruction = MinterBurner.View with
  custodian = instruction.routedStep.custodian
  depository = instruction.routedStep.quantity.unit.depository
  issuer = instruction.routedStep.quantity.unit.issuer

-- | HIDE
mergeAndSplitHelper : [ContractId Fungible.I] ->
                      Decimal ->
                      Update (ContractId Fungible.I, Optional (ContractId Fungible.I))
mergeAndSplitHelper holdingCids amount = do
  mergedHoldingCid <- case holdingCids of
    [] -> error "Cannot merge/split empty holdings" 
    [firstHoldingCid] -> pure firstHoldingCid
    firstHoldingCid :: others -> exercise firstHoldingCid Fungible.Merge with fungibleCids = others
  splitResult <- exercise mergedHoldingCid Fungible.Split with amounts = [amount]
  pure (
      O.fromSomeNote "Internal error: unexpected empty split result" (List.head splitResult.splitCids),
      splitResult.rest
    )
