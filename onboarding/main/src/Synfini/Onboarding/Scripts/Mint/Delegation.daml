module Synfini.Onboarding.Scripts.Mint.Delegation where

import qualified Daml.Finance.Interface.Holding.Fungible as Fungible
import Daml.Finance.Interface.Types.Common.Types

import DA.Set (Set)
import qualified DA.Set as Set
import Synfini.Mint
import Synfini.Mint.Delegation
import Synfini.Onboarding.Scripts.Types
import qualified Daml.Finance.Interface.Holding.Base as Holding
import DA.Foldable (forA_)
import Daml.Script
import qualified DA.Foldable as F

data MintReceiverSettings = MintReceiverSettings
  with
    operators : [Text]
    receiver : Text
    custodian : Text
    accountId : Text
    instrumentIssuer : Text
    instrumentDepository : Text
    instrumentId : Text
    instrumentVersion : Text

data CreateMintReceiversInput = CreateMintReceiversInput
  with
    parties : [PartyInfo]
    mintReceiverSettings : [MintReceiverSettings]

createMintReceivers : CreateMintReceiversInput -> Script ()
createMintReceivers input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  F.forA_ input.mintReceiverSettings $ \settings -> do
    let operators = p <$> settings.operators
        receiverAccount = AccountKey with
          custodian = p settings.custodian
          owner = p settings.receiver
          id = Id settings.accountId
        instrument = InstrumentKey with
          issuer = p settings.instrumentIssuer
          depository = p settings.instrumentDepository
          id = Id settings.instrumentId
          version = settings.instrumentVersion
    submitMulti operators [] do
      createCmd MintReceiver with operators = Set.fromList operators, receiverAccount, instrument

data MinterSettings = MinterSettings
  with
    operators : [Text]
    minter : Text
    instrumentIssuer : Text
    instrumentDepository : Text
    instrumentId : Text
    instrumentVersion : Text

data CreateMintersInput = CreateMintersInput
  with
    parties : [PartyInfo]
    minterSettings : [MinterSettings]

createMinters : CreateMintersInput -> Script ()
createMinters input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  F.forA_ input.minterSettings $ \settings -> do
    let operators = p <$> settings.operators
        instrument = InstrumentKey with
          issuer = p settings.instrumentIssuer
          depository = p settings.instrumentDepository
          id = Id settings.instrumentId
          version = settings.instrumentVersion
        minter = p settings.minter
    submitMulti operators [] do
      createCmd Minter with operators = Set.fromList operators, minter, instrument
