module Synfini.Onboarding.Scripts.Settlement.Accept where

import DA.Map (Map)
import DA.Set (Set)

import DA.List qualified as L
import DA.Map qualified as Map
import DA.Optional qualified as O
import DA.Set qualified as Set

import Daml.Script

import Daml.Finance.Interface.Settlement.Types
import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction

import Synfini.Onboarding.Scripts.Types
import Synfini.Settlement.Helpers

data SettlementPreferenceSettings = SettlementPreferenceSettings
  with
    custodian : Text
    depository : Optional Text
    issuer : Optional Text
    instrumentId : Optional Text
    minterBurner : Optional Bool
    accountId : Optional Text
    settleOffLedger : Optional Bool

data SettlementPreference = SettlementPreference
  with
    custodian : Party
    depository : Optional Party
    issuer : Optional Party
    instrumentId : Optional Id
    minterBurner : Bool
    accountId : Optional Id
    settleOffLedger : Bool

asPreference : (Text -> Party) -> SettlementPreferenceSettings -> SettlementPreference
asPreference p settings = SettlementPreference with
  custodian = p settings.custodian
  depository = p <$> settings.depository
  issuer = p <$> settings.issuer
  instrumentId = Id <$> settings.instrumentId
  minterBurner = O.fromOptional False settings.minterBurner
  accountId = Id <$> settings.accountId
  settleOffLedger = O.fromOptional False settings.settleOffLedger

data AcceptSettlementSettings = AcceptSettlementSettings
  with
    acceptor : Text
    batchId : Text
    settlementPreferences : [SettlementPreferenceSettings]

data AcceptSettlementInput = AcceptSettlementInput
  with
    parties : [PartyInfo]
    acceptSettlementSettings : AcceptSettlementSettings

instructionKey : Instruction.V -> InstructionKey
instructionKey Instruction.View { requestors, batchId, id } = InstructionKey with requestors, batchId, id

findMatchingPreference : Instruction.V -> [SettlementPreference] -> Optional SettlementPreference
findMatchingPreference instruction preferences =
  let isMatching pref = pref.custodian == instruction.routedStep.custodian &&
        O.optional True (instruction.routedStep.quantity.unit.depository ==) pref.depository &&
        O.optional True (instruction.routedStep.quantity.unit.issuer ==) pref.issuer &&
        O.optional True (instruction.routedStep.quantity.unit.id ==) pref.instrumentId
  in
  find isMatching preferences

type Allocations = (
    [(Id, AllocationHelp, Optional HoldingDescriptor)],
    Map (Party, InstrumentQuantity) (Set Id), -- Map to allow for finding instruction(s) which have a given custodian
    -- and quantity - this is used to find appropriate instructions to pass through holdings from
    Map Id (Id, Id) -- Map containing instruction IDs (the map keys) for which the approval needs to be passed through
    -- to the provided pair (the map values) of account ID and instruction ID
  )

applyAllocationPreference : Party ->
                            Allocations ->
                            (Instruction.V, SettlementPreference) ->
                            Allocations
applyAllocationPreference acceptor (allocations, received, usePassThroughs) (instruction, preference) =
  let custodianQuantity = (instruction.routedStep.custodian, instruction.routedStep.quantity) in
  let (newAllocation, passThroughFrom)
        | preference.minterBurner &&
          instruction.routedStep.sender == instruction.routedStep.custodian &&
          instruction.routedStep.receiver == instruction.routedStep.quantity.unit.issuer =
          (Some (IssuerCreditHelp, None), None)
        | preference.settleOffLedger && instruction.routedStep.sender == acceptor =
          (Some (SettleOffledgerHelp, None), None)
        | not preference.settleOffLedger && instruction.routedStep.sender == acceptor =
          case preference.accountId of
            Some accountId ->
              let receivedInstructionId = Set.toList <$> Map.lookup custodianQuantity received in
              case receivedInstructionId of
                Some (fromInstructionId :: _) ->
                  (
                    Some (PassThroughFromHelp accountId fromInstructionId, None), 
                    Some (accountId, fromInstructionId)
                  )
                _ ->
                  (
                    Some (
                      PledgeFromFungiblesHelp,
                      Some (HoldingDescriptor instruction.routedStep.quantity.unit instruction.routedStep.custodian)
                    ),
                    None
                  )
            None | instruction.routedStep.sender == instruction.routedStep.custodian ->
              (Some (CreditReceiverHelp, None), None)
            None -> (None, None)
        | otherwise = (None, None)
  in
  let allocations' = O.optional
        allocations
        (\(allocation, h) -> (instruction.id, allocation, h) :: allocations)
        newAllocation
      received' = O.optional
        received
        (\(_, fromInstructionId) -> Map.alter
          (\instructionSet -> Set.delete fromInstructionId <$> instructionSet)
          custodianQuantity
          received)
        passThroughFrom
      usePassThroughs' = O.optional
        usePassThroughs
        (\(accId, fromInstructionId) -> Map.insert fromInstructionId (accId, instruction.id) usePassThroughs)
        passThroughFrom
  in
  (allocations', received', usePassThroughs')

type Approvals = [(Id, ApprovalHelp)]

applyApprovalPreference : Party -> Map Id (Id, Id) -> Approvals -> (Instruction.V, SettlementPreference) -> Approvals
applyApprovalPreference acceptor usePassThroughs approvals (instruction, preference) =
  let newApproval
        | preference.minterBurner &&
          instruction.routedStep.sender == instruction.routedStep.quantity.unit.issuer &&
          instruction.routedStep.receiver == instruction.routedStep.custodian =
          Some ApproveIssuerDebitHelp
        | preference.settleOffLedger && instruction.routedStep.receiver == acceptor =
          Some SettleOffledgerAcknowledgeHelp
        | not preference.settleOffLedger && instruction.routedStep.receiver == acceptor =
          case (preference.accountId, Map.lookup instruction.id usePassThroughs) of
            (Some accId, Some (accountId, passThroughToInstruction)) ->
              Some (PassThroughToHelp accId passThroughToInstruction)
            (Some accId, _) -> Some (TakeDeliveryHelp accId)
            (None, _) | instruction.routedStep.sender == instruction.routedStep.custodian -> Some DebitSenderHelp
            (None, _) -> None
        | otherwise = None
  in
  O.optional approvals (\approval -> (instruction.id, approval) :: approvals) newApproval

acceptSettlement : AcceptSettlementInput -> Script ()
acceptSettlement input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
      settings = input.acceptSettlementSettings
  let acceptor = p settings.acceptor
  let preferences = asPreference p <$> settings.settlementPreferences
  instructions <- queryInterface @Instruction.I acceptor
  let relevantInstructions = do
        (cid, instr) <- instructions
        case instr of
          Some v | v.batchId == Id settings.batchId -> [(cid, v)]
          _ -> []
  let instructionsMap = Map.fromList $ (\(cid, instr) -> (instr.id, cid)) <$> relevantInstructions
  let updateReceivedKey instrId instrSet = Some $ O.optional (Set.singleton instrId) (Set.insert instrId) instrSet
  let insertReceived m (_, instr)
        | instr.routedStep.receiver == acceptor =
          Map.alter (updateReceivedKey instr.id) (instr.routedStep.custodian, instr.routedStep.quantity) m
        | otherwise = m
  let received = foldl insertReceived Map.empty relevantInstructions
  let instructionsWithPreferences = O.mapOptional
        (\(_, instr) -> (instr,) <$> findMatchingPreference instr preferences)
        relevantInstructions
  let (allocations, _, usePassThroughs) = foldl
        (applyAllocationPreference acceptor)
        ([], received, Map.empty)
        instructionsWithPreferences
  let approvals = foldl (applyApprovalPreference acceptor usePassThroughs) [] instructionsWithPreferences
  let holdingDescriptors = Set.fromList $ O.mapOptional (\(_, _, h) -> h) allocations
  holdings <- queryInterface @Holding.I acceptor
  let relevantHoldings = do
        (cid, h) <- holdings
        case h of
          Some v | v.account.owner == acceptor &&
            O.isNone v.lock &&
            descriptor v `Set.member` holdingDescriptors -> [(cid, v)]
          _ -> []
  let groupedHoldings = L.groupOn (descriptor . snd) relevantHoldings
  let holdingsMap = Map.fromList $
        (\holdings -> (descriptor . snd $ L.head holdings, fst <$> holdings)) <$> groupedHoldings
  let allocationsMap = Map.fromList $ (\(instrId, allocation, _) -> (instrId, allocation)) <$> allocations
  submit acceptor do
    createAndExerciseCmd
      (
        AllocateAndApproveHelper with
          actors = Set.fromList [acceptor]
          holdings = holdingsMap
          instructions = instructionsMap
          allocations = allocationsMap
          approvals = Map.fromList approvals
      )
      AllocateAndApprove
  pure ()

descriptor : Holding.V -> HoldingDescriptor
descriptor h = HoldingDescriptor with custodian = h.account.custodian, instrument = h.instrument
