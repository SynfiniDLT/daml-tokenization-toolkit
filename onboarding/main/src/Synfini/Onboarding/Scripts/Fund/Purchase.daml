module Synfini.Onboarding.Scripts.Fund.Purchase where

import Synfini.Onboarding.Scripts.Types
import Synfini.Fund.Offer
import Daml.Script
import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Holding.Base as Holding

data AcceptPurchaseSettings = AcceptPurchaseSettings
  with
    fund : Text
    fundCustodian : Text
    fundAccountId : Text
    investmentId : Text

data AcceptPurchaseInput = AcceptPurchaseInput
  with
    parties : [PartyInfo]
    readAs : [Text]
    acceptPurchaseSettings : AcceptPurchaseSettings

acceptFundPurchase : AcceptPurchaseInput -> Script ()
acceptFundPurchase input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  let fund = p input.acceptPurchaseSettings.fund
  let fundAccount = AccountKey with
        owner = fund
        custodian = p input.acceptPurchaseSettings.fundCustodian
        id = Id input.acceptPurchaseSettings.fundAccountId
      readAs = p <$> input.readAs
      investmentId = Id input.acceptPurchaseSettings.investmentId
  instruction <- submitMulti [fund] readAs do
    exerciseByKeyCmd @FundPurchaseInstruction (fund, investmentId) GetFundPurchaseInstructionPayload with viewer = fund
  holdingCids <- queryInterface @Holding.I fund
  let fundHoldingCids = filter
        (\(_, Some h) -> h.instrument == instruction.unitsInstrument && h.account == fundAccount)
        holdingCids
  submitMulti [fund] readAs do
    createAndExerciseCmd
      (AcceptPurchaseInstructionHelper fund)
      AcceptPurchaseInstructionFromFungibles with
        allocationCids = (coerceInterfaceContractId . fst) <$> fundHoldingCids
        investmentId
  pure ()
