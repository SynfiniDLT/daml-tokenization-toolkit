module Synfini.Onboarding.Scripts.Factory.Account where

import qualified Daml.Finance.Interface.Account.Factory as Account
import qualified Daml.Finance.Account.Account as AccountImpl
import Synfini.Onboarding.Scripts.Party
import Synfini.Onboarding.Scripts.Types
import qualified Synfini.Interface.Onboarding.Account.OpenOffer.Factory as AccountOpenOfferFactory
import qualified Synfini.Onboarding.Account.OpenOffer as AccountOpenOfferFactoryImpl
import DA.Map (Map)
import Daml.Script
import qualified DA.Map as Map
import qualified DA.Set as Set

data AccountFactorySettings = AccountFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data AccountFactory = AccountFactory
  with
    label : Text
    cid : ContractId Account.F

data CreateAccountFactoriesInput = CreateAccountFactoriesInput
  with
    parties : [PartyInfo]
    accountFactorySettings : [AccountFactorySettings]

data CreateAccountFactoriesOutput = CreateAccountFactoriesOutput
  with
    accountFactories : [AccountFactory]

createAccountFactories : CreateAccountFactoriesInput -> Script CreateAccountFactoriesOutput
createAccountFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  accountFactories <- forA input.accountFactorySettings $ \settings -> do
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do
      createCmd AccountImpl.Factory with
        provider
        observers = asPartiesMap p settings.observers
    pure AccountFactory with label = settings.label, cid
  pure CreateAccountFactoriesOutput with 
    accountFactories

data AccountOpenOfferFactorySettings = AccountOpenOfferFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data CreateAccountOpenOfferFactoriesInput = CreateAccountOpenOfferFactoriesInput
  with
    parties : [PartyInfo]
    accountOpenOfferFactorySettings : [AccountOpenOfferFactorySettings]

data AccountOpenOfferFactory = AccountOpenOfferFactory
  with
    label : Text
    cid : ContractId AccountOpenOfferFactory.I

data CreateAccountOpenOfferFactoriesOutput = CreateAccountOpenOfferFactoriesOutput
  with
    accountOpenOfferFactories : [AccountOpenOfferFactory]

createAccountOpenOfferFactories : CreateAccountOpenOfferFactoriesInput -> Script CreateAccountOpenOfferFactoriesOutput
createAccountOpenOfferFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  accountOpenOfferFactories <- forA input.accountOpenOfferFactorySettings $ \settings -> do
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do
      createCmd AccountOpenOfferFactoryImpl.Factory with
        provider
        observers = asPartiesMap p settings.observers
    pure AccountOpenOfferFactory with label = settings.label, cid
  pure CreateAccountOpenOfferFactoriesOutput with 
    accountOpenOfferFactories
