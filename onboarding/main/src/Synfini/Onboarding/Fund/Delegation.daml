module Synfini.Onboarding.Fund.Delegation where

import Synfini.Fund.Offer.Delegation
import Synfini.Onboarding.Types
import Daml.Script
import Daml.Finance.Interface.Types.Common.Types
import qualified DA.Set as Set
import DA.Foldable (forA_)

data FundInvestorSettings = FundInvestorSettings
  with
    investor : Text
    investmentAccountCustodian : Text
    investmentAccountId : Text
    fund : Text
    fundDepository : Text
    fundInstrumentId : Text
    fundInstrumentVersion : Text
    operators : [Text]

data CreateFundInvestorsInput = CreateFundInvestorsInput
  with
    parties : [PartyInfo]
    investorSettings : [FundInvestorSettings]

createFundInvestors : CreateFundInvestorsInput -> Script ()
createFundInvestors input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  let contract investorSettings =
        let investorAccount = AccountKey with
              owner = p investorSettings.investor
              custodian = p investorSettings.investmentAccountCustodian
              id = Id investorSettings.investmentAccountId
            unitsInstrument = InstrumentKey with
              issuer = p investorSettings.fund
              depository = p investorSettings.fundDepository
              id = Id investorSettings.fundInstrumentId
              version = investorSettings.fundInstrumentVersion
            operators = Set.fromList (p <$> investorSettings.operators)
        in
        FundInvestor with investorAccount, unitsInstrument, operators
  forA_ (contract <$> input.investorSettings) $ \contract -> do
    submitMulti (signatory contract) [] (createCmd contract)
