module Synfini.Onboarding.Types where

import Daml.Finance.Interface.Types.Common.Types
import qualified DA.Map as Map
import DA.Map (Map)
import qualified DA.Set as Set
import qualified DA.Optional as O

data PartyInfo = PartyInfo
  with
    label : Text
    partyId : Party

partyTable : [PartyInfo] -> Map Text Party
partyTable parties = Map.fromList $ (\partyInfo -> (partyInfo.label, partyInfo.partyId)) <$> parties

getPartyId : Map Text Party -> Text -> Party
getPartyId parties label = O.fromSomeNote ("Party not provided: " <> label) $ Map.lookup label parties

data Observer = Observer
  with
    context : Text
    parties : [Text]

asPartiesMap : (Text -> Party) -> [Observer] -> PartiesMap
asPartiesMap p observers = Map.fromList $ (\o -> (o.context, Set.fromList (p <$> o.parties))) <$> observers

findFactoryContractId : (HasField "label" f Text, HasField "cid" f c) => Text -> [f] -> c
findFactoryContractId label list =
  O.fromSomeNote
    ("Factory not found: " <> show label)
    (
      O.findOptional
      (\f -> if f.label == label then Some f.cid else None)
      list
    )
