module Synfini.Onboarding.Factory.Account where

import qualified Daml.Finance.Interface.Account.Factory as Account
import qualified Daml.Finance.Account.Account as AccountImpl
import Synfini.Onboarding.Party
import Synfini.Onboarding.Types
import DA.Map (Map)
import Daml.Script
import qualified DA.Map as Map
import qualified DA.Set as Set

data AccountFactorySettings = AccountFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data AccountFactory = AccountFactory
  with
    label : Text
    cid : ContractId Account.F

data CreateAccountFactoriesInput = CreateAccountFactoriesInput
  with
    parties : [PartyInfo]
    accountFactorySettings : [AccountFactorySettings]

data CreateAccountFactoriesOutput = CreateAccountFactoriesOutput
  with
    accountFactories : [AccountFactory]

createAccountFactories : CreateAccountFactoriesInput -> Script CreateAccountFactoriesOutput
createAccountFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  accountFactories <- forA input.accountFactorySettings $ \settings -> do
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do
      createCmd AccountImpl.Factory with
        provider
        observers = asPartiesMap p settings.observers
    pure AccountFactory with label = settings.label, cid
  pure CreateAccountFactoriesOutput with 
    accountFactories
