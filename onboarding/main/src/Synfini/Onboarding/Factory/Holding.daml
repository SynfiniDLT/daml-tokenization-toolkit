module Synfini.Onboarding.Factory.Holding where

import qualified Daml.Finance.Holding.Fungible as FungibleImpl
import qualified Daml.Finance.Holding.NonFungible as NonFungibleImpl
import qualified Daml.Finance.Holding.NonTransferable as NonTranferableImpl
import qualified Daml.Finance.Interface.Holding.Factory as Holding
import qualified Synfini.TrackableHolding.Fungible as TrackableFungibleImpl
import Daml.Script
import Synfini.Onboarding.Types
import qualified DA.Set as Set

data HoldingFactorySettings = HoldingFactorySettings
  with
    label : Text
    holdingType : Text
    provider : Text
    observers : [Observer]
    holdingTrackers : Optional [Text]

data CreateHoldingFactoriesInput = CreateHoldingFactoriesInput
  with
    parties : [PartyInfo]
    holdingFactorySettings : [HoldingFactorySettings]

data HoldingFactory = HoldingFactory
  with
    label : Text
    cid : ContractId Holding.F

data CreateHoldingFactoriesOutput = CreateHoldingFactoriesOutput
  with
    holdingFactories : [HoldingFactory]

createHoldingFactories : CreateHoldingFactoriesInput -> Script CreateHoldingFactoriesOutput
createHoldingFactories CreateHoldingFactoriesInput { parties, holdingFactorySettings } = do
  let pm = partyTable parties
  let p = getPartyId pm
  holdingFactories <- forA holdingFactorySettings $ \settings -> do
    let observers = asPartiesMap p settings.observers
    let provider = p settings.provider
    let holdingTrackers = (Set.fromList . fmap p) <$> settings.holdingTrackers
    cid <- case (settings.holdingType, holdingTrackers) of
      ("Fungible", None) -> toInterfaceContractId <$> submit provider do
        createCmd FungibleImpl.Factory with provider, observers
      ("Fungible", Some t) -> toInterfaceContractId <$> submit provider do
        createCmd TrackableFungibleImpl.Factory with provider, observers, holdingTrackers = t
      ("NonFungible", None) -> toInterfaceContractId <$> submit provider do
        createCmd NonFungibleImpl.Factory with provider, observers
      ("NonTransferable", None) -> toInterfaceContractId <$> submit provider do
        createCmd NonTranferableImpl.Factory with provider, observers
      other -> error ("Unsupported holding type: " <> show other)
    pure HoldingFactory with label = settings.label, cid
  pure CreateHoldingFactoriesOutput with holdingFactories
