module Synfini.Operations.Types where

import DA.Map (Map)

import DA.Map qualified as Map
import DA.Optional qualified as O
import DA.Set qualified as Set

import Daml.Finance.Interface.Types.Common.Types

data PartyInfo = PartyInfo
  with
    label : Text
    partyId : Party

partyTable : [PartyInfo] -> Map Text Party
partyTable parties = Map.fromList $ (\partyInfo -> (partyInfo.label, partyInfo.partyId)) <$> parties

getPartyId : Map Text Party -> Text -> Party
getPartyId parties label = O.fromSomeNote ("Party not provided: " <> label) $ Map.lookup label parties

data Observer = Observer
  with
    context : Text
    parties : [Text]

asPartiesMap : (Text -> Party) -> [Observer] -> PartiesMap
asPartiesMap p observers = Map.fromList $ (\o -> (o.context, Set.fromList (p <$> o.parties))) <$> observers

findByLabel : (HasField "label" a Text) => Text -> [a] -> a
findByLabel label list = O.fromSomeNote ("Label not found: " <> show label) (find (\a -> a.label == label) list)

findCidByLabel : (HasField "label" a Text, HasField "cid" a c) => Text -> [a] -> c
findCidByLabel label list = (findByLabel label list).cid
