module Synfini.Operations.Factory.Settlement where

import DA.Set qualified as Set

import Daml.Script

import Daml.Finance.Settlement.Factory qualified as SettlementImpl

import Daml.Finance.Interface.Settlement.Factory qualified as Settlement

import Synfini.Operations.Types

import Synfini.TrackableSettlement.Factory qualified as TrackableSettlementImpl

import Synfini.Interface.Settlement.OneTimeOffer.Factory qualified as OneTimeOfferFactory
import Synfini.Interface.Settlement.OpenOffer.Factory qualified as OpenOfferFactory
import Synfini.Settlement.OpenOffer qualified as OpenOfferImpl
import Synfini.Settlement.OneTimeOffer qualified as OneTimeOfferImpl

data SettlementFactorySettings = SettlementFactorySettings
  with
    label : Text
    provider : Text
    observers : [Text]
    settlementTrackers : Optional [Text]

data CreateSettlementFactoriesInput = CreateSettlementFactoriesInput
  with
    parties : [PartyInfo]
    settlementFactorySettings : [SettlementFactorySettings]

data SettlementFactory = SettlementFactory
  with
    label : Text
    cid : ContractId Settlement.F

data CreateSettlementFactoriesOutput = CreateSettlementFactoriesOutput
  with
    settlementFactories : [SettlementFactory]

createSettlementFactories : CreateSettlementFactoriesInput -> Script CreateSettlementFactoriesOutput
createSettlementFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  settlementFactories <- forA input.settlementFactorySettings $ \settings -> do
    let provider = p settings.provider
    let defaultFactory = SettlementImpl.Factory with
          provider
          observers = Set.fromList (p <$> settings.observers)
    cid <- case settings.settlementTrackers of
      None -> toInterfaceContractId <$> submit provider do createCmd defaultFactory
      Some trackers -> toInterfaceContractId <$> submit provider do
        createCmd TrackableSettlementImpl.Factory with
          defaultFactory
          settlementTrackers = Set.fromList (p <$> trackers)
    pure SettlementFactory with label = settings.label, cid
  pure CreateSettlementFactoriesOutput with 
    settlementFactories

data OneTimeOfferFactorySettings = OneTimeOfferFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data CreateOneTimeOfferFactoriesInput = CreateOneTimeOfferFactoriesInput
  with
    parties : [PartyInfo]
    settlementOneTimeOfferFactorySettings : [OneTimeOfferFactorySettings]

data OneTimeOfferFactory = OneTimeOfferFactory
  with
    cid : ContractId OneTimeOfferFactory.I
    label : Text

data CreateOneTimeOfferFactoriesOutput = CreateOneTimeOfferFactoriesOutput
  with
    settlementOneTimeOfferFactories : [OneTimeOfferFactory]

createSettlementOneTimeOfferFactories : CreateOneTimeOfferFactoriesInput -> Script CreateOneTimeOfferFactoriesOutput
createSettlementOneTimeOfferFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  settlementOneTimeOfferFactories <- forA input.settlementOneTimeOfferFactorySettings $ \settings -> do
    let observers = asPartiesMap p settings.observers
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do createCmd OneTimeOfferImpl.Factory with provider, observers
    pure OneTimeOfferFactory with label = settings.label, cid
  pure CreateOneTimeOfferFactoriesOutput with settlementOneTimeOfferFactories

data OpenOfferFactorySettings = OpenOfferFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data CreateOpenOfferFactoriesInput = CreateOpenOfferFactoriesInput
  with
    parties : [PartyInfo]
    settlementOpenOfferFactorySettings : [OpenOfferFactorySettings]

data OpenOfferFactory = OpenOfferFactory
  with
    cid : ContractId OpenOfferFactory.I
    label : Text

data CreateOpenOfferFactoriesOutput = CreateOpenOfferFactoriesOutput
  with
    settlementOpenOfferFactories : [OpenOfferFactory]

createSettlementOpenOfferFactories : CreateOpenOfferFactoriesInput -> Script CreateOpenOfferFactoriesOutput
createSettlementOpenOfferFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  settlementOpenOfferFactories <- forA input.settlementOpenOfferFactorySettings $ \settings -> do
    let observers = asPartiesMap p settings.observers
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do createCmd OpenOfferImpl.Factory with provider, observers
    pure OpenOfferFactory with label = settings.label, cid
  pure CreateOpenOfferFactoriesOutput with settlementOpenOfferFactories
