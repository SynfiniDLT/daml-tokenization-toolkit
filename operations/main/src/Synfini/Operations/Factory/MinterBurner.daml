module Synfini.Operations.Factory.MinterBurner where

import Daml.Script

import Synfini.Operations.Types

import Synfini.Onboarding.Issuer.MinterBurner qualified as MinterBurnerImpl

import Synfini.Interface.Onboarding.Issuer.MinterBurner.Factory qualified as MinterBurnerFactory

data MinterBurnerFactorySettings = MinterBurnerFactorySettings
  with
    label : Text
    provider : Text
    observers : [Observer]

data CreateMinterBurnerFactoriesInput = CreateMinterBurnerFactoriesInput
  with
    parties : [PartyInfo]
    minterBurnerFactorySettings : [MinterBurnerFactorySettings]

data MinterBurnerFactory = MinterBurnerFactory
  with
    label : Text
    cid : ContractId MinterBurnerFactory.I

data CreateMinterBurnerFactoriesOutput = CreateMinterBurnerFactoriesOutput
  with
    minterBurnerFactories : [MinterBurnerFactory]

createMinterBurnerFactories : CreateMinterBurnerFactoriesInput -> Script CreateMinterBurnerFactoriesOutput
createMinterBurnerFactories input = do
  let pm = partyTable input.parties
  let p = getPartyId pm
  minterBurnerFactories <- forA input.minterBurnerFactorySettings $ \settings -> do
    let observers = asPartiesMap p settings.observers
    let provider = p settings.provider
    cid <- toInterfaceContractId <$> submit provider do
      createCmd MinterBurnerImpl.Factory with provider, observers
    pure MinterBurnerFactory with label = settings.label, cid
  pure CreateMinterBurnerFactoriesOutput with minterBurnerFactories
