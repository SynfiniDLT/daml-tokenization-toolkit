module Synfini.Operations.Factory.Holding where

import DA.Set qualified as Set

import Daml.Script

import Daml.Finance.Holding.Fungible qualified as FungibleImpl
import Daml.Finance.Holding.NonFungible qualified as NonFungibleImpl
import Daml.Finance.Holding.NonTransferable qualified as NonTranferableImpl

import Daml.Finance.Interface.Holding.Factory qualified as Holding

import Synfini.Operations.Types

import Synfini.TrackableHolding.Fungible qualified as TrackableFungibleImpl
import Synfini.TrackableHolding.NonTransferable qualified as TrackableNonTransferableImpl

data HoldingFactorySettings = HoldingFactorySettings
  with
    label : Text
    holdingType : Text
    provider : Text
    observers : [Observer]
    holdingTrackers : Optional [Text]

data CreateHoldingFactoriesInput = CreateHoldingFactoriesInput
  with
    parties : [PartyInfo]
    holdingFactorySettings : [HoldingFactorySettings]

data HoldingFactory = HoldingFactory
  with
    label : Text
    cid : ContractId Holding.F

data CreateHoldingFactoriesOutput = CreateHoldingFactoriesOutput
  with
    holdingFactories : [HoldingFactory]

createHoldingFactories : CreateHoldingFactoriesInput -> Script CreateHoldingFactoriesOutput
createHoldingFactories CreateHoldingFactoriesInput { parties, holdingFactorySettings } = do
  let pm = partyTable parties
  let p = getPartyId pm
  holdingFactories <- forA holdingFactorySettings $ \settings -> do
    let observers = asPartiesMap p settings.observers
    let provider = p settings.provider
    let holdingTrackers = (Set.fromList . fmap p) <$> settings.holdingTrackers
    cid <- case (settings.holdingType, holdingTrackers) of
      ("Fungible", None) -> toInterfaceContractId <$> submit provider do
        createCmd FungibleImpl.Factory with provider, observers
      ("Fungible", Some t) -> toInterfaceContractId <$> submit provider do
        createCmd TrackableFungibleImpl.Factory with
          defaultFactory = FungibleImpl.Factory with provider, observers
          holdingTrackers = t
      ("NonFungible", None) -> toInterfaceContractId <$> submit provider do
        createCmd NonFungibleImpl.Factory with provider, observers
      ("NonTransferable", None) -> toInterfaceContractId <$> submit provider do
        createCmd NonTranferableImpl.Factory with provider, observers
      ("NonTransferable", Some t) -> toInterfaceContractId <$> submit provider do
        createCmd TrackableNonTransferableImpl.Factory with
          defaultFactory = NonTranferableImpl.Factory with provider, observers
          holdingTrackers = t
      other -> error ("Unsupported holding type: " <> show other)
    pure HoldingFactory with label = settings.label, cid
  pure CreateHoldingFactoriesOutput with holdingFactories
