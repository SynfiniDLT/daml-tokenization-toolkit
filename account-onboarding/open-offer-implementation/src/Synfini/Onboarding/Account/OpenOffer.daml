module Synfini.Onboarding.Account.OpenOffer where

import DA.Optional qualified as O
import DA.Set qualified as Set

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Account.Factory qualified as Account
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure
import Daml.Finance.Util.Disclosure qualified as ImplUtil

import Synfini.Interface.Onboarding.Account.OpenOffer.Factory qualified as OpenOfferFactory
import Synfini.Interface.Onboarding.Account.OpenOffer.OpenOffer qualified as OpenOffer

template OpenOffer
  with
    custodian : Party
    ownerIncomingControlled : Bool
    ownerOutgoingControlled : Bool
    additionalControllers : Account.Controllers
    permittedOwners : Optional Parties
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
    description : Text
    observers : PartiesMap
  where
    signatory custodian

    observer Disclosure.flattenObservers observers, O.fromOptional Set.empty permittedOwners

    interface instance Disclosure.I for OpenOffer where
      view = Disclosure.View with disclosureControllers = Set.fromList [custodian], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance OpenOffer.I for OpenOffer where
      view = OpenOffer.View with ..
      take' args = do
        assertMsg
          "Must be a permitted owner"
          (O.optional True (\allowed -> args.owner `Set.member` allowed) permittedOwners)
        let incomingControllers =
              (if ownerIncomingControlled then Set.fromList [args.owner] else Set.empty) <> additionalControllers.incoming
            outgoingControllers =
              (if ownerOutgoingControlled then Set.fromList [args.owner] else Set.empty) <> additionalControllers.outgoing
        exercise accountFactoryCid Account.Create with
          account = AccountKey with custodian, owner = args.owner, id = args.id
          holdingFactoryCid
          controllers = Account.Controllers with incoming = incomingControllers, outgoing = outgoingControllers
          description = args.accountDescription
          observers = args.accountObservers

template Factory
  with
    provider : Party
    observers : PartiesMap
  where
    signatory provider

    observer Disclosure.flattenObservers observers

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.fromList [provider], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance OpenOfferFactory.I for Factory where
      view = OpenOfferFactory.View with ..
      create' OpenOfferFactory.Create {
        custodian,
        ownerIncomingControlled,
        ownerOutgoingControlled,
        additionalControllers,
        permittedOwners,
        accountFactoryCid,
        holdingFactoryCid,
        description,
        observers
      } = do
        toInterfaceContractId <$> create OpenOffer with ..
