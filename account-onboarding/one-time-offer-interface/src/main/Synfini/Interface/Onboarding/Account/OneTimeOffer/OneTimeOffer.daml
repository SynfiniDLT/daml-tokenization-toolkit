module Synfini.Interface.Onboarding.Account.OneTimeOffer.OneTimeOffer where

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Account.Factory qualified as Account
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

data View = View
  with
    account : AccountKey
    accountControllers : Account.Controllers
    accountDescription : Text
    accountObservers : PartiesMap
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
    description : Text
  deriving (Show, Eq)

type V = View

interface OneTimeOffer requires Disclosure.I where
  viewtype V

  accept : Update (ContractId Account.I)

  decline : Update ()

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  choice Accept : ContractId Account.I
    controller (view this).account.owner
    do
      accept this

  choice Decline : ()
    controller (view this).account.owner
    do
      decline this

type I = OneTimeOffer
