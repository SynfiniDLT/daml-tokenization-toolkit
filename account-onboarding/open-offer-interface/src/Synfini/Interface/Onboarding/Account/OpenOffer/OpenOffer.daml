module Synfini.Interface.Onboarding.Account.OpenOffer.OpenOffer where

import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Factory as Account
import qualified Daml.Finance.Interface.Holding.Factory as Holding
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure

data View = View
  with
    custodian : Party
    ownerIncomingControlled : Bool
    ownerOutgoingControlled : Bool
    additionalControllers : Account.Controllers
    permittedOwners : Optional Parties
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
  deriving (Show, Eq)

type V = View

interface OpenOffer requires Disclosure.I where
  viewtype V

  accept : Accept -> Update (ContractId Account.I)

  nonconsuming choice Accept : ContractId Account.I
    with
      owner : Party
      id : Id
      description : Text
      observers : PartiesMap
    controller owner
    do
      accept this arg

type I = OpenOffer
