module Synfini.Interface.Onboarding.Account.OpenOffer.Factory where

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Account.Factory qualified as Account
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Onboarding.Account.OpenOffer.OpenOffer qualified as OpenOffer

data View = View
  with
    provider : Party
  deriving (Show, Eq)

type V = View

interface Factory requires Disclosure.I where
  viewtype V

  create' : Create -> Update (ContractId OpenOffer.I)

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Create : ContractId OpenOffer.I
    with
      custodian : Party
      ownerIncomingControlled : Bool
      ownerOutgoingControlled : Bool
      additionalControllers : Account.Controllers
      permittedOwners : Optional Parties
      accountFactoryCid : ContractId Account.F
      holdingFactoryCid : ContractId Holding.F
      description : Text
      observers : PartiesMap
    controller custodian
    do
      create' this arg

type I = Factory
