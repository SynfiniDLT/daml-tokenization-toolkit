{-# LANGUAGE AllowAmbiguousTypes #-}
module Synfini.Interface.Onboarding.Issuer.MinterBurner.MinterBurner where

import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Common (exerciseInterfaceByKeyHelper)

-- | View of a 'MinterBurner'.
data View = View
  with
    custodian : Party -- ^ Custodian under which 'Holding's can be minted or burned.
    depository : Party -- ^ Depository of the instrument for any 'Holding's minted or burned.
    issuer : Party -- ^ Instrument issuer who is responsible for authorising minting or burning.
  deriving (Show, Eq)

-- | Type synonym for 'View'.
type V = View

-- | Contract which permits an issuer to use settlement 'Instruction's to mint (create 'Holding's) or burn
-- (archive 'Holding's) under the custodian. The allows the custodian to delegate responsibility for these actions to
-- the issuer. Note that authorisation from the incoming controllers of the account to credit is still required to
-- execute the minting 'Instruction'. Similarly for burning, the outgoing controllers of the account must allocate the
-- 'Instruction' prior to settlement. Mint and burning are therefore bilateral workflows between issuer and owner.
interface MinterBurner requires Disclosure.I where
  viewtype V

  -- | Implementation of the 'AllocateMint' choice.
  allocateMint : AllocateMint -> Update (ContractId Instruction.I, Optional (ContractId Holding.I))

  -- | Implementation of the 'UnallocateMint' choice.
  unallocateMint : UnallocateMint -> Update (ContractId Instruction.I, Optional (ContractId Holding.I))

  -- | Implementation of the 'ApproveBurn' choice.
  approveBurn : ApproveBurn -> Update (ContractId Instruction.I)

  -- | Implementation of the 'UnapproveBurn' choice.
  unapproveBurn : UnapproveBurn -> Update (ContractId Instruction.I)

  -- | Retrieves the interface view.
  nonconsuming choice GetView : V
    with
      viewer : Party
    controller viewer
    do
      pure (view this)

  -- | Allocate an 'Instruction' (the sender of which must be the custodian) by electing to credit the receiver.
  nonconsuming choice AllocateMint : (ContractId Instruction.I, Optional (ContractId Holding.I))
    with
      instructionCid : ContractId Instruction.I -- ^ Instruction to be allocated.
    controller (view this).issuer
    do
      allocateMint this arg

  -- | Un-allocate an 'Instruction' (the sender of which must be the custodian).
  nonconsuming choice UnallocateMint : (ContractId Instruction.I, Optional (ContractId Holding.I))
    with
      instructionCid : ContractId Instruction.I -- ^ Instruction to be remove allocation from.
    controller (view this).issuer
    do
      unallocateMint this arg

  -- | Approve an 'Instruction' (the receiver of which must be the custodian) by electing to debit the sender.
  nonconsuming choice ApproveBurn : ContractId Instruction.I
    with
      instructionCid : ContractId Instruction.I -- ^ Instruction to be approved.
    controller (view this).issuer
    do
      approveBurn this arg

  -- | Un-approve an 'Instruction' (the receiver of which must be the custodian).
  nonconsuming choice UnapproveBurn : ContractId Instruction.I
    with
      instructionCid : ContractId Instruction.I -- ^ Instruction to remove approval from.
    controller (view this).issuer
    do
      unapproveBurn this arg

-- | Type synonym for 'MinterBurner'.
type I = MinterBurner

-- | HIDE
-- This template is used to key a MinterBurner contract. It allows for looking up this contract by
-- key then acquiring the MinterBurner contract by fetching its contract id on this contract. As
-- updates are made to an MinterBurner, this Reference contract is required to be kept in sync.
template Reference
  with
    minterBurnerView : V -- ^ The default view.
    cid : ContractId I -- ^ The contract id of the MinterBurner.
    observers : PartiesMap -- ^ Observers.
  where
    signatory minterBurnerView.custodian
    observer minterBurnerView.depository, minterBurnerView.issuer, Disclosure.flattenObservers observers

    key minterBurnerView : V
    maintainer key.custodian

    -- | Get the 'MinterBurner''s contract id.
    nonconsuming choice GetCid : ContractId I
      with
        viewer : Party
      controller viewer
      do
        pure cid

    -- | Set the MinterBurner cid. This choice should be called only from 'MinterBurner' implementations.
    choice SetCid : ContractId R
      with
        newCid : ContractId I
          -- The minterburner cid.
      controller minterBurnerView.custodian
      do
        create this with cid = newCid

    -- | Set observers. This choice should be called only from 'MinterBurner' implementations.
    choice SetObservers : ContractId R
      with
        newObservers : PartiesMap -- ^ The new observers.
      controller minterBurnerView.custodian
      do
        create this with observers = newObservers

type R = Reference

-- | Exercise interface by key.
-- This method can be used to exercise a choice on a 'MinterBurner' given its `View`.
-- Requires as input the `View`, the actor fetching the minter burner and the choice
-- arguments. For example:
exerciseInterfaceByKey : forall i d r. (HasInterfaceTypeRep i, HasExercise i d r)
  => V              -- ^ The minter burner view (key).
  -> Party          -- ^ The actor fetching the minter burner.
  -> d              -- ^ The choice arguments.
  -> Update r
exerciseInterfaceByKey k viewer arg =
  exerciseInterfaceByKeyHelper @R @I @i k (GetCid with viewer) arg

-- | HIDE
-- Create Reference for a minter burner.
createReference : Party -> ContractId I -> Update (ContractId R)
createReference actor cid = do
  minterBurnerView <- exercise cid GetView with viewer = actor
  disclosureView <- exercise (toInterfaceContractId @Disclosure.I cid) Disclosure.GetView with
    viewer = actor
  create Reference with minterBurnerView; cid; observers = disclosureView.observers

-- | HIDE
-- Helper function to update the minter burner reference once observers are added to the minter burner.
disclosureUpdateReference : V -> PartiesMap -> ContractId I -> Update (ContractId Disclosure.I)
disclosureUpdateReference k newObservers iCid = do
  exerciseByKey @Reference k SetCid with newCid = iCid
  exerciseByKey @Reference k SetObservers with newObservers
  pure $ toInterfaceContractId iCid
