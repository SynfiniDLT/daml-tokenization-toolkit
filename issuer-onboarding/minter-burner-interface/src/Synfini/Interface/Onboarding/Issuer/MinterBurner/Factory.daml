module Synfini.Interface.Onboarding.Issuer.MinterBurner.Factory where

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Onboarding.Issuer.MinterBurner.MinterBurner qualified as MinterBurner

-- | View of a 'Factory'.
data View = View
  with
    provider : Party -- ^ Provider of the 'Factory'.
  deriving (Show, Eq)

-- | Type synonym for 'View'.
type V = View

-- | Factory to create instances of 'MinterBurner'.
interface Factory requires Disclosure.I where
  viewtype V

  -- | Implementation of the 'Create' choice.
  create' : Create -> Update (ContractId MinterBurner.I)

  remove : Remove -> Update ()

  nonconsuming choice Create : ContractId MinterBurner.I
    with
      custodian : Party
      depository : Party
      issuer : Party
      observers : PartiesMap
    controller custodian
    do
      create' this arg

  nonconsuming choice Remove : ()
    with
      custodian : Party
      depository : Party
      issuer : Party
    controller custodian
    do
      remove this arg

-- | Type synonym for 'Factory'.
type I = Factory
