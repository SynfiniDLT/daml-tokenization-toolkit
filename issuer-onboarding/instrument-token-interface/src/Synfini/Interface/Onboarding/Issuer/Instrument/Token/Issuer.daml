module Synfini.Interface.Onboarding.Issuer.Instrument.Token.Issuer where

import Daml.Finance.Interface.Instrument.Token.Types (Token)
import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)

import Daml.Finance.Interface.Instrument.Token.Factory qualified as Token
import Daml.Finance.Interface.Instrument.Token.Instrument qualified as Token
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

data View = View
  with
    depository : Party
    issuer : Party
    instrumentFactoryCid : ContractId Token.F
  deriving (Show, Eq)

type V = View

interface Issuer requires Disclosure.I where
  viewtype V

  createInstrument : CreateInstrument -> Update (ContractId Token.I)

  removeInstrument : RemoveInstrument -> Update ()

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice CreateInstrument : ContractId Token.I
    with
      token : Token
      observers : PartiesMap
    controller (view this).issuer
    do
      createInstrument this arg

  nonconsuming choice RemoveInstrument : ()
    with
      id : Id
      version : Text
    controller (view this).issuer
    do
      removeInstrument this arg

type I = Issuer
