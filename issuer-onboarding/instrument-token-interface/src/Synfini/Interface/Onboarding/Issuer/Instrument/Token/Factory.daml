module Synfini.Interface.Onboarding.Issuer.Instrument.Token.Factory where

import Daml.Finance.Interface.Types.Common.Types

import Daml.Finance.Interface.Instrument.Token.Factory qualified as Token
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

import Synfini.Interface.Onboarding.Issuer.Instrument.Token.Issuer qualified as Issuer

-- | View of a 'Factory'.
data View = View
  with
    provider : Party -- ^ Provider of the 'Factory'.
  deriving (Show, Eq)

-- | Type synonym for 'View'.
type V = View

-- | Factory to create instances of 'Issuer'.
interface Factory requires Disclosure.I where
  viewtype V

  -- | Implementation of the 'Create' choice.
  create' : Create -> Update (ContractId Issuer.I)

  -- | Retrieves the interface view.
  nonconsuming choice GetView : V
    -- | Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  -- | Create an 'Issuer'.
  nonconsuming choice Create : ContractId Issuer.I
    with
      depository : Party -- ^ Depository of instruments that can be created by the issuer.
      issuer : Party -- ^ Issuer which can create instruments.
      instrumentFactoryCid : ContractId Token.F -- ^ Factory used to create instruments.
      observers : PartiesMap -- ^ Observers of the 'Issuer'.
    controller depository
    do
      create' this arg

-- | Type synonym for 'Factory'.
type I = Factory
