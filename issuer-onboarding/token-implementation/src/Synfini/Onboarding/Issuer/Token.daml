module Synfini.Onboarding.Issuer.Token where

import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Instrument.Token.Factory as Token
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure
import qualified DA.Set as Set
import qualified Daml.Finance.Util.Disclosure as ImplUtil
import qualified Synfini.Interface.Onboarding.Issuer.Token.Issuer as TokenIssuer
import qualified Synfini.Interface.Onboarding.Issuer.Token.Factory as TokenIssuerFactory
import Synfini.Tokenization.Util (assertEqMsg)

template Issuer
  with
    depository : Party
    issuer : Party
    instrumentFactoryCid : ContractId Token.F
    observers : PartiesMap
  where
    signatory depository

    observer issuer, Disclosure.flattenObservers observers

    interface instance Disclosure.I for Issuer where
      view = Disclosure.View with disclosureControllers = Set.fromList [depository, issuer], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance TokenIssuer.I for Issuer where
      view = TokenIssuer.View with depository, issuer, instrumentFactoryCid
      createInstrument args = do
        assertEqMsg "Token to be created by have expected issuer" args.token.instrument.issuer issuer
        assertEqMsg "Token to be created by have expected depository" args.token.instrument.depository depository
        exercise instrumentFactoryCid Token.Create with
          token = args.token
          observers = args.observers
      removeInstrument args = do
        token <- view <$> fetch args.instrumentCid
        archive args.instrumentCid
        assertEqMsg "Archived token must be issued by expected issuer" token.token.instrument.issuer issuer
        assertEqMsg "Archived token must have expected depository" token.token.instrument.depository depository

template Factory
  with
    provider : Party
    observers : PartiesMap
  where
    signatory provider

    observer Disclosure.flattenObservers observers

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.fromList [provider], observers
      setObservers = ImplUtil.setObserversImpl @_ @Disclosure.I this None
      addObservers = ImplUtil.addObserversImpl @_ @Disclosure.I this None
      removeObservers = ImplUtil.removeObserversImpl @_ @Disclosure.I this None

    interface instance TokenIssuerFactory.I for Factory where
      view = TokenIssuerFactory.View with provider
      create' args = toInterfaceContractId <$>
        create Issuer with
          depository = args.depository
          issuer = args.issuer
          instrumentFactoryCid = args.instrumentFactoryCid
          observers = args.observers
