module Synfini.Interface.Onboarding.Issuer.Token.Issuer where

import qualified Daml.Finance.Interface.Instrument.Token.Instrument as Token
import qualified Daml.Finance.Interface.Instrument.Token.Factory as Token
import Daml.Finance.Interface.Instrument.Token.Types (Token)
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure
import qualified Daml.Finance.Interface.Instrument.Token.Instrument as Instrument

data View = View
  with
    depository : Party
    issuer : Party
    instrumentFactoryCid : ContractId Token.F
  deriving (Show, Eq)

type V = View

interface Issuer requires Disclosure.I where
  viewtype V

  createInstrument : CreateInstrument -> Update (ContractId Token.I)

  removeInstrument : RemoveInstrument -> Update ()

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice CreateInstrument : ContractId Token.I
    with
      token : Token
      observers : PartiesMap
    controller (view this).issuer
    do
      createInstrument this arg

  nonconsuming choice RemoveInstrument : ()
    with
      instrumentCid : ContractId Instrument.I
    controller (view this).issuer
    do
      removeInstrument this arg

type I = Issuer
